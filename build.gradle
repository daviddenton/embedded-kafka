import static org.gradle.api.JavaVersion.VERSION_11

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:_"
        classpath("io.codearte.nexus-staging:io.codearte.nexus-staging.gradle.plugin:_")
    }
}

repositories {
    mavenCentral()
}

apply plugin: "kotlin"
apply plugin: "io.codearte.nexus-staging"
apply plugin: "maven-publish"

description = "Embedded Kafka Broker and JUnit5 Extension"
version = project.hasProperty("releaseVersion") ? project.releaseVersion : "LOCAL"
group = "dev.forkhandles"

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes "Implementation-Title": project.name,
            "Implementation-Vendor": "dev.forkhandles",
            "Implementation-Version": project.version,
            "embedded-kafka-Version": archiveVersion
    }
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

tasks.register("sourcesJar", Jar) {
    dependsOn classes
    classifier = "sources"
    from sourceSets.main.allSource
}

tasks.register("javadocJar", Jar) {
    dependsOn javadoc
    classifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.register("testJar", Jar) {
    classifier "test"
    from sourceSets.test.output
}

compileKotlin.kotlinOptions.jvmTarget = "11"
compileTestKotlin.kotlinOptions.jvmTarget = "11"

sourceCompatibility = VERSION_11
targetCompatibility = VERSION_11

configurations {
    testArtifacts.extendsFrom testRuntime
}

artifacts {
    testArtifacts testJar
    archives sourcesJar, javadocJar
}

def enableSigning = project.findProperty("sign") == "true"

apply plugin: "maven-publish"

if (enableSigning) { // when added it expects signing keys to be configured
    apply plugin: "signing"

    signing {
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")

        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }
}

def nexusUsername = project.findProperty("nexusUsername") ?: "notset"
def nexusPassword = project.findProperty("nexusPassword") ?: "notset"

publishing {
    repositories {
        maven {
            name "SonatypeStaging"
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username nexusUsername
                password nexusPassword
            }
        }
        maven {
            name "SonatypeSnapshot"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username nexusUsername
                password nexusPassword
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName

            pom.withXml {
                asNode().appendNode("name", archivesBaseName)
                asNode().appendNode("description", description)
                asNode().appendNode("url", "https://forkhandles.dev")
                asNode().appendNode("developers")
                    .appendNode("developer").appendNode("name", "Nat Pryce").parent().appendNode("email", "nat@forkhandles.dev")
                    .parent().parent()
                    .appendNode("developer").appendNode("name", "David Denton").parent().appendNode("email", "david@forkhandles.dev")
                    .parent().parent()
                    .appendNode("developer").appendNode("name", "Dmitry Kandalov").parent().appendNode("email", "dmitry@forkhandles.dev")
                    .parent().parent()
                    .appendNode("developer").appendNode("name", "Duncan McGregor").parent().appendNode("email", "duncan@forkhandles.dev")
                asNode().appendNode("scm").
                    appendNode("url", "git@github.com:fork-handles/embedded-kafka.git").parent().
                    appendNode("connection", "scm:git:git@github.com:fork-handles/embedded-kafka.git").parent().
                    appendNode("developerConnection", "scm:git:git@github.com:fork-handles/embedded-kafka.git")
                asNode().appendNode("licenses").appendNode("license").
                    appendNode("name", "MIT License").parent()
            }
            from components.java

            artifact sourcesJar
            artifact javadocJar
        }
    }
}

dependencies {
    api(Kotlin.stdlib.jdk8)
    api("com.google.guava:guava:_")
    api("org.apache.kafka:kafka_2.13:_")
    api("org.apache.zookeeper:zookeeper:_")
    api(Testing.junit.jupiter.api)

    testApi(Testing.junit.jupiter.api)
    testApi(Testing.junit.jupiter.engine)
}
